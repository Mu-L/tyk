name: Persistent Environment Check
on:
  pull_request:

env:
  SERVICE: "tyk"
  CONTAINER_NAME: "tyk"
  CLUSTER: "kikitest4"
  IMAGE: "tyk:v4.0.0"

jobs:
  Check:
    runs-on: ubuntu-latest
    outputs: 
      env-exist: ${{ steps.check-env.outputs.env-exist }}
      container-name: ${{ steps.set-output-defaults.outputs.container-name }}
      cluster: ${{ steps.set-output-defaults.outputs.cluster }}
      service: ${{ steps.set-output-defaults.outputs.service }}
      image: ${{ steps.set-output-defaults.outputs.image }}
      registry: ${{ steps.login-ecr.outputs.registry }}
    steps:
      - name: Shallow checkout of tyk
        uses: actions/checkout@v2
        with:
          fetch-depth: 1

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v1
        with:
          cli_config_credentials_token: ${{ secrets.TF_API_TOKEN }}
          terraform_wrapper: false

      - name: Get AWS creds from Terraform remote state
        id: aws-creds
        run: |
          cd ci/terraform
          terraform init -input=false
          terraform refresh 2>&1 >/dev/null
          eval $(terraform output -json tyk | jq -r 'to_entries[] | [.key,.value] | join("=")')
          region=$(terraform output region | xargs)
          [ -z "$key" -o -z "$secret" -o -z "$region" ] && exit 1
          echo "::set-output name=secret::$secret"
          echo "::set-output name=key::$key"
          echo "::set-output name=region::$region"

      - name: Configure AWS credentials for ECR
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ steps.aws-creds.outputs.key }}
          aws-secret-access-key: ${{ steps.aws-creds.outputs.secret }}
          aws-region: ${{ steps.aws-creds.outputs.region }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Configure AWS credentials for ECS query
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.GROMIT_AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.GROMIT_AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ steps.aws-creds.outputs.region }}

      - name: Check environment exist
        id: check-env
        run: |
          output="$(aws ecs describe-clusters --clusters ${{ env.CLUSTER }})"
          echo "$output"
          failures="$(echo "$output" | jq -r '.failures[0].reason')"
          env_status="$(echo "$output" | jq -r '.clusters[0].status')"
          
          if [[ "${failures}" == "null" ]];then
            if [[ "$env_status" == "ACTIVE" ]];then
              echo "::set-output name=env-exist::true"
              echo "true"
            fi
          elif [[ "${failures}" == "MISSING" ]];then
            echo "::set-output name=env-exist::false"
            echo "false"
          fi


      - name: Simulate outputs from the release pipeline
        id: set-output-defaults
        run: |
          echo "::set-output name=container-name::${{ env.CONTAINER_NAME }}"
          echo "::set-output name=cluster::${{ env.CLUSTER }}"
          echo "::set-output name=service::${{ env.SERVICE }}"
          echo "::set-output name=image::${{ env.IMAGE }}"

  Create-workflow:
    if: ${{ needs.Check.outputs.env-exist == 'false' }}
    uses: ./.github/workflows/create-persistent-env.yml
    needs:
      - Check
    with:
      containerName: ${{ needs.Check.outputs.container-name }}
      cluster: ${{ needs.Check.outputs.cluster }}
    secrets:
      aws_key: ${{ secrets.GROMIT_AWS_ACCESS_KEY_ID }}
      aws_secret: ${{ secrets.GROMIT_AWS_SECRET_ACCESS_KEY }}
      tf_token: ${{ secrets.TF_API_TOKEN }}
      etcd_pass: ${{ secrets.ETCD_PASS }}
      docker_user: ${{ secrets.DOCKER_USERNAME }}
      docker_pass: ${{ secrets.DOCKER_PASSWORD }}

  Update-workflow:
    if: ${{ needs.Check.outputs.env-exist == 'true' }}
    uses: ./.github/workflows/update-persistent-env.yml
    needs:
      - Check
    with:
      containerName: ${{ needs.Check.outputs.container-name }}
      cluster: ${{ needs.Check.outputs.cluster }}
      service: ${{ needs.Check.outputs.service }}
      image: ${{ needs.Check.outputs.image }}
    secrets:
      aws_key: ${{ secrets.GROMIT_AWS_ACCESS_KEY_ID }}
      aws_secret: ${{ secrets.GROMIT_AWS_SECRET_ACCESS_KEY }}
      registry: ${{ needs.Check.outputs.registry }}

  Record-update:
    runs-on: ubuntu-latest
    steps:
      - name: Updating DNS records
        run: echo "Updating DNS RECORDS"